# .github/workflows/release.yml
name: Build EM Tools Extensions (Multi-Platform)

on:
  push:
    tags:
      - 'v*.*.*'      # Stable releases (v1.5.0)
      - 'v*.*.*-rc.*' # Release candidates (v1.5.0-rc.1)
      - 'v*.*.*-dev.*' # Dev releases (v1.5.0-dev.43)
  
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.5.0-dev.43)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [windows-x64, macosx-arm64, macosx-x64, linux-x64]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.version_tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Download platform-specific wheels
        run: |
          mkdir -p wheels
          
          # Map GitHub platform to pip platform tags
          case "${{ matrix.platform }}" in
            windows-x64)
              PIP_PLATFORM="win_amd64"
              ;;
            macosx-arm64)
              PIP_PLATFORM="macosx_11_0_arm64"
              ;;
            macosx-x64)
              PIP_PLATFORM="macosx_10_13_x86_64"
              ;;
            linux-x64)
              PIP_PLATFORM="manylinux2014_x86_64"
              ;;
          esac
          
          echo "Downloading wheels for $PIP_PLATFORM..."
          
          # Download each package for the specific platform
          while IFS= read -r package || [ -n "$package" ]; do
            # Skip empty lines and comments
            [[ -z "$package" || "$package" =~ ^[[:space:]]*# ]] && continue
            
            echo "Downloading $package for $PIP_PLATFORM..."
            pip download "$package" \
              --only-binary=:all: \
              --platform="$PIP_PLATFORM" \
              --python-version=3.11 \
              --implementation=cp \
              --abi=cp311 \
              -d wheels/ || true
          done < scripts/requirements_wheels.txt
          
          # List downloaded wheels
          echo "Downloaded wheels:"
          ls -la wheels/
      
      - name: Generate platform-specific manifest
        run: |
          python scripts/version_manager.py set-mode --mode stable
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update version.json
          python -c "
          import json
          config = {'version': '$VERSION', 'platform': '${{ matrix.platform }}'}
          with open('version.json', 'w') as f:
              json.dump(config, f, indent=2)
          "
          
          # Update manifest
          python scripts/version_manager.py update
          
          # Verifica l'integrità del manifest generato
          if ! grep -q "version = \"$VERSION\"" blender_manifest.toml; then
            echo "WARNING: Versione nel manifest non corretta, riparazione..."
            python -c "
            import re
            with open('blender_manifest.toml', 'r') as f:
                content = f.read()
            content = re.sub(r'version = \"[^\"]*\"', 'version = \"$VERSION\"', content)
            with open('blender_manifest.toml', 'w') as f:
                f.write(content)
            "
            echo "Manifest riparato con versione: $VERSION"
          fi
      
      - name: Create platform-specific package
        run: |
          PLATFORM="${{ matrix.platform }}"
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="em_tools-v${VERSION}-${PLATFORM}.blext"
          
          # Create build directory
          mkdir -p build
          
          # Copy all addon files except development files
          rsync -av --exclude='.git' \
                    --exclude='.github' \
                    --exclude='scripts' \
                    --exclude='__pycache__' \
                    --exclude='*.pyc' \
                    --exclude='build' \
                    --exclude='*.blext' \
                    --exclude='.gitignore' \
                    --exclude='blender_manifest_template.toml' \
                    --exclude='version.json' \
                    --exclude='em.bat' \
                    --exclude='em.sh' \
                    . build/
          
          # Copy platform-specific wheels
          cp -r wheels build/ 2>/dev/null || true
          
          # Create the blext package
          cd build
          zip -r "../${PACKAGE_NAME}" . -x "*.pyc" "__pycache__/*"
          cd ..
          
          echo "Created package: ${PACKAGE_NAME}"
          ls -la "${PACKAGE_NAME}"
          
          # Store package name for release
          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_ENV
      
      - name: Upload platform package
        uses: actions/upload-artifact@v4
        with:
          name: em_tools-${{ matrix.platform }}
          path: ${{ env.package_name }}
  
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      
      - name: Extract version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.version_tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Check if prerelease
        id: prerelease
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" =~ -(dev|rc|alpha|beta) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=pre-release" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=stable" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: EM Tools ${{ steps.version.outputs.tag }}
          files: em_tools-*.blext
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          generate_release_notes: true
          body: |
            ## EM Tools ${{ steps.version.outputs.tag }}
            
            This is a **${{ steps.prerelease.outputs.release_type }}** of EM Tools.
            
            ### Platform-Specific Downloads
            - **Windows (x64)**: `em_tools-${{ steps.version.outputs.tag }}-windows-x64.blext`
            - **macOS (Apple Silicon)**: `em_tools-${{ steps.version.outputs.tag }}-macosx-arm64.blext`
            - **macOS (Intel)**: `em_tools-${{ steps.version.outputs.tag }}-macosx-x64.blext`
            - **Linux (x64)**: `em_tools-${{ steps.version.outputs.tag }}-linux-x64.blext`
            
            ### Installation
            1. Download the appropriate `.blext` file for your platform
            2. In Blender 4.0+: **Extensions** → **Install from Disk**
            3. Select the downloaded file
            4. Enable the extension
            
            ### What's Included
            Each platform package contains only the wheels needed for that specific platform, resulting in smaller file sizes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}